package main

import (
	"fmt"
	"sync"
)

/* Реализовать структуру-счетчик, которая будет инкрементироваться в конкурентной среде.
По завершению программа должна выводить итоговое значение счетчика. */

/*Решение данной задачи было реализовано через мьютексы.
Также её можно решить через атомарные операции (пакет atomic)
В файле task18_test.go проведены тесты производительности двух подходов.
Решение через atomic проходит быстрее примерно в 2 раза.*/



// Создаём структуру со счётчиком, вэйтгруппой и мьютексом для избежания состояния гонки
type counter struct {
	n int64
	wg sync.WaitGroup
	mu sync.Mutex
}
func main() {
	// Инициализируем экземляр структуры счётчика
	c:=counter{}
	// Вводим количество итераций для инкрементирования счётчика
	var iterations int
	fmt.Print("Введите количество итераций: ")
	fmt.Scan(&iterations)
	// Добавляем в вэйтгруппу количество итераций, чтобы главная горутина дождаласьокончания инкрементирования
	c.wg.Add(iterations)
	// В цикле производим конкурентное инкрементирования счётчика
	for i:=0; i<iterations;i++{
		go func() {
			// При помощи мьютексов избегаем состояния гонки
			c.mu.Lock()
			c.n++
			c.mu.Unlock()
			c.wg.Done()
		}()
	}
	// Ждём, пока не отработают все горутины инкрементирования
	c.wg.Wait()
	// Выводим итоговое значение счётчика
	fmt.Println(c.n)

}